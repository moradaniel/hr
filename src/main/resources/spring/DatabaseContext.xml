<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
>	



	<!-- bean id="unidadOrganizativaDao" class="org.dpi.unidadOrganizativa.UnidadOrganizativaDaoHibImpl">
		<property name="sessionFactory"><ref bean="hibernateSessionFactory"/></property>
	</bean -->


	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
	    <property name="transactionManager" ref="transactionManager"/>
	</bean>

	<bean id="dpiJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg><ref local="dpiDataSource"/></constructor-arg>
	</bean>


	<!-- 
		DataSource for the master database; the jdbc url is set as an override in a
		ApplicationContext.properties in the classpath
	-->
	<bean id="dpiDataSource" parent="oraclePooledDataSource">
		<property name="jdbcUrl"  value="OVERRIDE"/>
		<property name="user"     value="OVERRIDE"/>
		<property name="password" value="OVERRIDE"/>
	</bean>


	<!--
		- Defines a transaction manager for usage in business or data access objects.
		- No special treatment by the context, just a bean instance available as reference
		- for business objects that want to handle transactions, e.g. via TransactionTemplate.
		-
		- Needs a reference to the SessionFactory for which it will handle transactions.
		- Can optionally take a reference to a DataSource that it should use to export the Hibernate
		- transactions, to be able to share transactions with plain JDBC access code
		- on the same database (using the same DataSource as the Hibernate SessionFactory).
	 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="hibernateSessionFactory"/></property>
		<property name="dataSource"><ref bean="dpiDataSource"/></property>
		<property name="prepareConnection" value="true"/>
	</bean>

	<bean id="hibernateSessionFactory" parent="oracleHibSessionFactory">
		<property name="dataSource"><ref bean="dpiDataSource"/></property>
		<property name="mappingResources" ref="dpiHibMappings"/>
	</bean>

	<!-- The usual set of Hibernate mappings for the Services -->
	<bean id="dpiHibMappings" class="org.springframework.beans.factory.config.ListFactoryBean">
		<property name="sourceList">
			<list>
				<value>/mappings/Reparticion.hbm.xml</value>
				<value>/mappings/CentroSector.hbm.xml</value>
				<value>/mappings/Agente.hbm.xml</value>
				<value>/mappings/Categoria.hbm.xml</value>
				<value>/mappings/Empleo.hbm.xml</value>
				<value>/mappings/MovimientoCreditos.hbm.xml</value>
				<value>/mappings/CreditsPeriod.hbm.xml</value>
				<value>/mappings/Account.hbm.xml</value>
				<value>/mappings/Role.hbm.xml</value>
				<value>/mappings/PermissionContext.hbm.xml</value>
			</list>
		</property>
	</bean>

	

	<!-- 
		The following are abstract database/hibernate 'template' abstract beans
		containing commonly used configuration parameters.  The abstract beans can
		be inherited using the 'parent' bean attribute to instantiate concrete
		beans. The properties of concrete beans can be overwritten to instantiate
		specific data source and hibernate session factories.
	-->

	<!-- 
		Abstract DataSource that stores common values among the various datasources;
		concrete data sources should use the 'parent' attribute to extend from this bean
	-->
	<bean id="oraclePooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" abstract="true">
		<property name="jdbcUrl"  value="SET_IN_CHILD_BEAN"/>
		<property name="user"     value="SET_IN_CHILD_BEAN"/>
		<property name="password" value="SET_IN_CHILD_BEAN"/>

		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>

		<!--
			The following c3p0 setup suggestions from: 
				http://forums.mysql.com/read.php?39,139821,160175
		-->
		<property name="initialPoolSize"          value= "2"/>
		<property name="minPoolSize"              value= "1"/>
		<property name="maxPoolSize"              value="25"/>

		<!-- Determines how many connections at a time c3p0 will try to acquire when the pool is exhausted -->
		<property name="acquireIncrement"         value= "2"/> 
		<property name="acquireRetryAttempts"     value="10"/> 

		<!-- 
			If this number is greater than 0, determines the frequency at which c3p0
			will test all idle pooled connections that have not been checked out
		-->
		<property name="idleConnectionTestPeriod" value="900"/> 

		<!--
			The seconds a Connection can remain pooled but unused before being
			discarded. Zero means idle connections never expire 
		-->
		<property name="maxIdleTime"              value="3600"/> 
		<property name="maxConnectionAge"         value="14400"/> 
		<property name="preferredTestQuery"       value="SELECT 1 from dual"/>	
		<property name="testConnectionOnCheckin"  value="false"/>	
		<property name="maxStatements"            value="200"/>
	</bean>


	<!--
		Template Hibernate Session Factory; override with proper datasource and set
		list of Hibernate mapping files
	-->
	<bean id="oracleHibSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" abstract="true">
		<property name="dataSource"       ref="SET_IN_CHILD_BEAN"/>
		<property name="mappingResources" ref="SET_IN_CHILD_BEAN"/>

		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.statement_cache.size">100</prop>
				<prop key="hibernate.query.substitutions">yes 'Y', no 'N'</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<prop key="hibernate.jdbc.batch_size">2000</prop>
				<prop key="show_sql">true</prop>
				<!-- this has to be set as a system property and cannot be set here -->
				<!-- <prop key="hibernate.cglib.use_reflection_optimizer">false</prop> -->
			</props>
		</property>

	</bean>
	
	
	<!-- 
		a default transaction attribute advice that specifies that all methods
		support transactions; create more specific transaction attributes in
		individual context files as appropriate
	-->
	<tx:advice id="txAllPropagationSupport" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- methods run in a transaction if one already exists, but they donâ€™t need to run within a transaction. --> 
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>

</beans>
